<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="4">
    <description>
      The &lt;a href=&quot;http://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation&quot;&gt;Schr√∂dinger equation&lt;/a&gt; describes the change in the 
      wave function for some quantum state. For a travelling particle, the magnitude of the wave packet describes the probability that the particle 
      will be found at each location.
      
      Here a wave packet travels through empty space until it reaches a high energy barrier, which it is reflected from.
      
      In our implementation, &apos;a&apos; represents the real part of the complex number and &apos;b&apos; the imaginary part. A fixed energy background is given by &apos;c&apos;.
      The magnitude is shown in &apos;d&apos; but doesn&apos;t affect the system.
      
      By changing the values of parameter &apos;potential&apos; and then using &apos;Generate Initial Pattern&apos; from the &apos;Action&apos; menu you can change the height
      of the barrier. Or you can paint directly into &apos;c&apos;.
      
    </description>
    <rule name="Schrodinger equation" type="kernel" neighborhood_type="vertex" neighborhood_range="1" neighborhood_weight="laplacian">
      <kernel number_of_chemicals="6" block_size_x="4" block_size_y="1" block_size_z="1">
        __kernel void rd_compute(__global float4 *a_in,__global float4 *b_in,__global float4 *c_in,__global float4 *d_in,__global float4 *e_in,__global float4 *f_in,__global float4 *a_out,__global float4 *b_out,__global float4 *c_out,__global float4 *d_out,__global float4 *e_out,__global float4 *f_out)
        {
            const int index_x = get_global_id(0);
            const int index_y = get_global_id(1);
            const int index_z = get_global_id(2);
            const int X = get_global_size(0);
            const int Y = get_global_size(1);
            const int Z = get_global_size(2);
            const int index_here = X*(Y*index_z + index_y) + index_x;
        
            float4 a = a_in[index_here];
            float4 b = b_in[index_here];
            float4 c = c_in[index_here];
            float4 d = d_in[index_here];
            float4 e = e_in[index_here];
            float4 f = f_in[index_here];
        
            // compute the Laplacians of each chemical
            // 2D standard 9-point stencil: [ 1,4,1; 4,-20,4; 1,4,1 ] / 6
            const int xm1 = (index_x-1+X) &amp; (X-1); // wrap (assumes X is a power of 2)
            const int xp1 = (index_x+1) &amp; (X-1);
            const int ym1 = (index_y-1+Y) &amp; (Y-1);
            const int yp1 = (index_y+1) &amp; (Y-1);
            const int index_n =  X*(Y*index_z + ym1) + index_x;
            const int index_ne = X*(Y*index_z + ym1) + xp1;
            const int index_e =  X*(Y*index_z + index_y) + xp1;
            const int index_se = X*(Y*index_z + yp1) + xp1;
            const int index_s =  X*(Y*index_z + yp1) + index_x;
            const int index_sw = X*(Y*index_z + yp1) + xm1;
            const int index_w =  X*(Y*index_z + index_y) + xm1;
            const int index_nw = X*(Y*index_z + ym1) + xm1;
            float4 a_n = a_in[index_n];
            float4 a_ne = a_in[index_ne];
            float4 a_e = a_in[index_e];
            float4 a_se = a_in[index_se];
            float4 a_s = a_in[index_s];
            float4 a_sw = a_in[index_sw];
            float4 a_w = a_in[index_w];
            float4 a_nw = a_in[index_nw];
        
            float4 b_n = b_in[index_n];
            float4 b_ne = b_in[index_ne];
            float4 b_e = b_in[index_e];
            float4 b_se = b_in[index_se];
            float4 b_s = b_in[index_s];
            float4 b_sw = b_in[index_sw];
            float4 b_w = b_in[index_w];
            float4 b_nw = b_in[index_nw];
            float4 c_n = c_in[index_n];
            float4 c_ne = c_in[index_ne];
            float4 c_e = c_in[index_e];
            float4 c_se = c_in[index_se];
            float4 c_s = c_in[index_s];
            float4 c_sw = c_in[index_sw];
            float4 c_w = c_in[index_w];
            float4 c_nw = c_in[index_nw];
            float4 d_n = d_in[index_n];
            float4 d_ne = d_in[index_ne];
            float4 d_e = d_in[index_e];
            float4 d_se = d_in[index_se];
            float4 d_s = d_in[index_s];
            float4 d_sw = d_in[index_sw];
            float4 d_w = d_in[index_w];
            float4 d_nw = d_in[index_nw];
            float4 e_n = e_in[index_n];
            float4 e_ne = e_in[index_ne];
            float4 e_e = e_in[index_e];
            float4 e_se = e_in[index_se];
            float4 e_s = e_in[index_s];
            float4 e_sw = e_in[index_sw];
            float4 e_w = e_in[index_w];
            float4 e_nw = e_in[index_nw];
            float4 f_n = f_in[index_n];
            float4 f_ne = f_in[index_ne];
            float4 f_e = f_in[index_e];
            float4 f_se = f_in[index_se];
            float4 f_s = f_in[index_s];
            float4 f_sw = f_in[index_sw];
            float4 f_w = f_in[index_w];
            float4 f_nw = f_in[index_nw];
            const float4 _K0 = -20.0f/6.0f; // center weight
            const float _K1 = 4.0f/6.0f; // edge-neighbors
            const float _K2 = 1.0f/6.0f; // vertex-neighbors
        
            float4 laplacian_a = (float4)(a_n.x*_K1 + a_n.y*_K2 + a.y*_K1 + a_s.y*_K2 + a_s.x*_K1 + a_sw.w*_K2 + a_w.w*_K1 + a_nw.w*_K2,
            a_n.y*_K1 + a_n.z*_K2 + a.z*_K1 + a_s.z*_K2 + a_s.y*_K1 + a_s.x*_K2 + a.x*_K1 + a_n.x*_K2,
            a_n.z*_K1 + a_n.w*_K2 + a.w*_K1 + a_s.w*_K2 + a_s.z*_K1 + a_s.y*_K2 + a.y*_K1 + a_n.y*_K2,
            a_n.w*_K1 + a_ne.x*_K2 + a_e.x*_K1 + a_se.x*_K2 + a_s.w*_K1 + a_s.z*_K2 + a.z*_K1 + a_n.z*_K2 ) + a*_K0;
            float4 laplacian_b = (float4)(b_n.x*_K1 + b_n.y*_K2 + b.y*_K1 + b_s.y*_K2 + b_s.x*_K1 + b_sw.w*_K2 + b_w.w*_K1 + b_nw.w*_K2,
            b_n.y*_K1 + b_n.z*_K2 + b.z*_K1 + b_s.z*_K2 + b_s.y*_K1 + b_s.x*_K2 + b.x*_K1 + b_n.x*_K2,
            b_n.z*_K1 + b_n.w*_K2 + b.w*_K1 + b_s.w*_K2 + b_s.z*_K1 + b_s.y*_K2 + b.y*_K1 + b_n.y*_K2,
            b_n.w*_K1 + b_ne.x*_K2 + b_e.x*_K1 + b_se.x*_K2 + b_s.w*_K1 + b_s.z*_K2 + b.z*_K1 + b_n.z*_K2 ) + b*_K0;
            float4 laplacian_c = (float4)(c_n.x*_K1 + c_n.y*_K2 + c.y*_K1 + c_s.y*_K2 + c_s.x*_K1 + c_sw.w*_K2 + c_w.w*_K1 + c_nw.w*_K2,
            c_n.y*_K1 + c_n.z*_K2 + c.z*_K1 + c_s.z*_K2 + c_s.y*_K1 + c_s.x*_K2 + c.x*_K1 + c_n.x*_K2,
            c_n.z*_K1 + c_n.w*_K2 + c.w*_K1 + c_s.w*_K2 + c_s.z*_K1 + c_s.y*_K2 + c.y*_K1 + c_n.y*_K2,
            c_n.w*_K1 + c_ne.x*_K2 + c_e.x*_K1 + c_se.x*_K2 + c_s.w*_K1 + c_s.z*_K2 + c.z*_K1 + c_n.z*_K2 ) + c*_K0;
            float4 laplacian_d = (float4)(d_n.x*_K1 + d_n.y*_K2 + d.y*_K1 + d_s.y*_K2 + d_s.x*_K1 + d_sw.w*_K2 + d_w.w*_K1 + d_nw.w*_K2,
            d_n.y*_K1 + d_n.z*_K2 + d.z*_K1 + d_s.z*_K2 + d_s.y*_K1 + d_s.x*_K2 + d.x*_K1 + d_n.x*_K2,
            d_n.z*_K1 + d_n.w*_K2 + d.w*_K1 + d_s.w*_K2 + d_s.z*_K1 + d_s.y*_K2 + d.y*_K1 + d_n.y*_K2,
            d_n.w*_K1 + d_ne.x*_K2 + d_e.x*_K1 + d_se.x*_K2 + d_s.w*_K1 + d_s.z*_K2 + d.z*_K1 + d_n.z*_K2 ) + d*_K0;
            float4 laplacian_e = (float4)(e_n.x*_K1 + e_n.y*_K2 + e.y*_K1 + e_s.y*_K2 + e_s.x*_K1 + e_sw.w*_K2 + e_w.w*_K1 + e_nw.w*_K2,
            e_n.y*_K1 + e_n.z*_K2 + e.z*_K1 + e_s.z*_K2 + e_s.y*_K1 + e_s.x*_K2 + e.x*_K1 + e_n.x*_K2,
            e_n.z*_K1 + e_n.w*_K2 + e.w*_K1 + e_s.w*_K2 + e_s.z*_K1 + e_s.y*_K2 + e.y*_K1 + e_n.y*_K2,
            e_n.w*_K1 + e_ne.x*_K2 + e_e.x*_K1 + e_se.x*_K2 + e_s.w*_K1 + e_s.z*_K2 + e.z*_K1 + e_n.z*_K2 ) + e*_K0;
            float4 laplacian_f = (float4)(f_n.x*_K1 + f_n.y*_K2 + f.y*_K1 + f_s.y*_K2 + f_s.x*_K1 + f_sw.w*_K2 + f_w.w*_K1 + f_nw.w*_K2,
            f_n.y*_K1 + f_n.z*_K2 + f.z*_K1 + f_s.z*_K2 + f_s.y*_K1 + f_s.x*_K2 + f.x*_K1 + f_n.x*_K2,
            f_n.z*_K1 + f_n.w*_K2 + f.w*_K1 + f_s.w*_K2 + f_s.z*_K1 + f_s.y*_K2 + f.y*_K1 + f_n.y*_K2,
            f_n.w*_K1 + f_ne.x*_K2 + f_e.x*_K1 + f_se.x*_K2 + f_s.w*_K1 + f_s.z*_K2 + f.z*_K1 + f_n.z*_K2 ) + f*_K0;
        
            const float4 _Kd0 = 0.0f/6.0f; // center weight
            const float _Kd1 = 0.0f/6.0f; // edge-neighbors
            const float _Kd1P = 1.0f/2.0f; // edge-neighbors
            const float _Kd1N = -1.0f/2.0f; // edge-neighbors
            const float _Kd2 = 0.0f/1.0f; // vertex-neighbors
            float4 div_a = (float4)(a_n.x*_Kd1P + a_n.y*_Kd2 + a.y*_Kd1 + a_s.y*_Kd2 + a_s.x*_Kd1N + a_sw.w*_Kd2 + a_w.w*_Kd1 + a_nw.w*_Kd2,
            a_n.y*_Kd1P + a_n.z*_Kd2 + a.z*_Kd1 + a_s.z*_Kd2 + a_s.y*_Kd1N + a_s.x*_Kd2 + a.x*_Kd1N + a_n.x*_Kd2,
            a_n.z*_Kd1P + a_n.w*_Kd2 + a.w*_Kd1 + a_s.w*_Kd2 + a_s.z*_Kd1N + a_s.y*_Kd2 + a.y*_Kd1N + a_n.y*_Kd2,
            a_n.w*_Kd1P + a_ne.x*_Kd2 + a_e.x*_Kd1 + a_se.x*_Kd2 + a_s.w*_Kd1N + a_s.z*_Kd2 + a.z*_Kd1N + a_n.z*_Kd2 ) + a*_Kd0;
        
            float4 delta_a = 0.0f;
            float4 delta_b = 0.0f;
            float4 delta_c = 0.0f;
            float4 delta_d = 0.0f;
            float4 delta_e = 0.0f;
            float4 delta_f = 0.0f;
        
            float4 timestep = 0.001000f;
            float4 potential = -2.000000f;
            float4 damp = 0.002500f;
            float4 vis = 2.000000f;
        
            delta_a=div_a;
        
            f=b*vis;
        
            a_out[index_here] = a + timestep * delta_a;
            b_out[index_here] = b + timestep * delta_b;
            c_out[index_here] = c + timestep * delta_c;
            d_out[index_here] = d + timestep * delta_d;
            e_out[index_here] = e + timestep * delta_e;
            f_out[index_here] = f + timestep * delta_f;
        }
        
      </kernel>
    </rule>
    <initial_pattern_generator apply_when_loading="false">
      <overlay chemical="d">
        <overwrite>
        </overwrite>
        <gaussian height="1" sigma="0.05">
          <point3D x="0.2" y="0.5" z="0.5">
          </point3D>
        </gaussian>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="d">
        <overwrite>
        </overwrite>
        <white_noise low="-1" high="1">
        </white_noise>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="a">
        <overwrite>
        </overwrite>
        <sine phase="0" amplitude="1">
          <point3D x="0" y="0" z="0">
          </point3D>
          <point3D x="0.05" y="0" z="0">
          </point3D>
        </sine>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="a">
        <multiply>
        </multiply>
        <other_chemical chemical="d">
        </other_chemical>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="a">
        <overwrite>
        </overwrite>
        <white_noise low="-1" high="1">
        </white_noise>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="a">
        <multiply>
        </multiply>
        <other_chemical chemical="d">
        </other_chemical>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="b">
        <overwrite>
        </overwrite>
        <sine phase="1.5708" amplitude="1">
          <point3D x="0" y="0" z="0">
          </point3D>
          <point3D x="0.05" y="0" z="0">
          </point3D>
        </sine>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="b">
        <multiply>
        </multiply>
        <other_chemical chemical="d">
        </other_chemical>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="c">
        <overwrite>
        </overwrite>
        <sine phase="1.5708" amplitude="1.5">
          <point3D x="0" y="0" z="0">
          </point3D>
          <point3D x="1" y="1" z="0">
          </point3D>
        </sine>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="c">
        <overwrite>
        </overwrite>
        <gaussian height="-2" sigma="0.075">
          <point3D x="0.35" y="0.5" z="0.5">
          </point3D>
        </gaussian>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="c">
        <add>
        </add>
        <gaussian height="-2" sigma="0.075">
          <point3D x="0.65" y="0.5" z="0.5">
          </point3D>
        </gaussian>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="e">
        <overwrite>
        </overwrite>
        <radial_gradient val1="0" val2="1">
          <point3D x="0.5" y="0.5" z="0">
          </point3D>
          <point3D x="1" y="1" z="0">
          </point3D>
        </radial_gradient>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="d">
        <overwrite>
        </overwrite>
        <gaussian height="1" sigma="0.05">
          <point3D x="0.35" y="0.5" z="0.5">
          </point3D>
        </gaussian>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="a">
        <overwrite>
        </overwrite>
        <sine phase="0" amplitude="1">
          <point3D x="0" y="0" z="0">
          </point3D>
          <point3D x="0.05" y="0" z="0">
          </point3D>
        </sine>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="a">
        <multiply>
        </multiply>
        <other_chemical chemical="d">
        </other_chemical>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="b">
        <overwrite>
        </overwrite>
        <sine phase="1.5708" amplitude="1">
          <point3D x="0" y="0" z="0">
          </point3D>
          <point3D x="0.05" y="0" z="0">
          </point3D>
        </sine>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="b">
        <multiply>
        </multiply>
        <other_chemical chemical="d">
        </other_chemical>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="d">
        <add>
        </add>
        <other_chemical chemical="c">
        </other_chemical>
        <everywhere>
        </everywhere>
      </overlay>
    </initial_pattern_generator>
    <render_settings>
      <surface_color r="1" g="1" b="1">
      </surface_color>
      <color_low r="0" g="0" b="1">
      </color_low>
      <color_high r="1" g="0" b="0">
      </color_high>
      <show_color_scale value="true">
      </show_color_scale>
      <show_multiple_chemicals value="false">
      </show_multiple_chemicals>
      <active_chemical value="a">
      </active_chemical>
      <low value="-0.5">
      </low>
      <high value="0.5">
      </high>
      <vertical_scale_1D value="100">
      </vertical_scale_1D>
      <vertical_scale_2D value="50">
      </vertical_scale_2D>
      <contour_level value="0.25">
      </contour_level>
      <use_wireframe value="false">
      </use_wireframe>
      <show_cell_edges value="false">
      </show_cell_edges>
      <show_bounding_box value="true">
      </show_bounding_box>
      <slice_3D value="true">
      </slice_3D>
      <slice_3D_axis value="z">
      </slice_3D_axis>
      <slice_3D_position value="0.5">
      </slice_3D_position>
      <show_displacement_mapped_surface value="true">
      </show_displacement_mapped_surface>
      <color_displacement_mapped_surface value="false">
      </color_displacement_mapped_surface>
      <use_image_interpolation value="true">
      </use_image_interpolation>
      <timesteps_per_render value="32">
      </timesteps_per_render>
      <show_phase_plot value="false">
      </show_phase_plot>
      <phase_plot_x_axis value="a">
      </phase_plot_x_axis>
      <phase_plot_y_axis value="b">
      </phase_plot_y_axis>
      <phase_plot_z_axis value="c">
      </phase_plot_z_axis>
    </render_settings>
  </RD>
  <ImageData WholeExtent="0 127 0 0 0 0" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 127 0 0 0 0">
    <PointData>
      <DataArray type="Float32" Name="a" format="binary" RangeMin="-0.69733530283" RangeMax="1.0975812674">
        AQAAAACAAAAAAgAACwIAAA==eJwBAAL//QAAAAAwcXUu/WPpLoTSrK6QhpCwKnIusaG8Wy/gmpEyXzSNM+AHajETO1u0kNsltVeyurX4pjE2ZDPUNsGg0jaa+SMt1pCKuDx+cLiy75c4xTXKOXyP9TnbTIq5QvnzunKlpbuJd/46R2ffO8WBQDxbobc80LQcvQmGBb3v92683TmHs+CjGj7gEdA8PkjMvSnRi748H+G9GVQfPn1Utj4oEEA/v2UCv6ixob5Znb6+kYQyv4t9jD8Bf4Y9QmTNPKRVJTV0kyq/Hk9QPmgQMz5sG78+QTFgvfe6272iSdi9ohtcvq9aQT4d+Jm8P9bcPISIKz0ykn69uWSoPO5Nh7uwmTGyVfi5O8O2aLt25qA5FBeBunXRBTpJghw2kpFcOORR+Thor/y4deA7ONstb7em6KK2bNrnNvPgbrZTj5I1z8awKmJmyLOf0qgzMU/osnJfrDG1sYSxfAahMJXHoq+6kAuv3jIaL4bVmK4n6cotDOyYK+da06t553wrd8G7qir1pp5fcVUnFB1Tp/wGxCYBf2OkodZVJFXXu6OHF9wic3CaIOIttKC/REkg0q6Tn57hDZy3I0Ac7IDzmw9wRRtJhhcOJLJglqOMdBaP9AGWj2GUEmiNnJKfMiESqCNbkSXqqI1gIcwNVydyjbl+vQwXHAIIWL8tiIT44Afn6z2Hffv5lA==
      </DataArray>
      <DataArray type="Float32" Name="b" format="binary" RangeMin="-0.97434228659" RangeMax="0.87712693214">
        AQAAAACAAAAAAgAACwIAAA==eJwBAAL//YwuyK0HACSuX4+iLuBFEjCzhpAwtE9VsIHOJLJ06ryymUyMqq5pDjSSULs0lcU2NCayurU+cY62G61utoSDNTcJBic4rCw5ONhjeLjpOpe5/TXKufnwSTnMI9M6gcMjO4W/rjLwFOK75TRJvGzXhLslobc8vJg9PVz11jweOl29d70JvuSnzr3fkLs9V4qaPlTRiz5P9by9+K0Fv/5PDL+/Zla23F4xP7yeVT943D4+VoQyv39ueb+zWb++7z8FP2SLYD+68+M+8v2LvgwXHL+tG7++7sGuPRpPpz7rpW0+WJuBNRKKCb6zKuC98ISHvEaIKz2mKyI9o1soPLOnHrz45jS8OIZ4uyqLzjpC0xs7RReBOn6/H7nJ9865wepGufJ0GrBn1FI49YDoN/M2PjZn6KK2B21QtqxoErUjtro07wyQNG/nhTMmmZayVcGZsrdfrLEmVRAwRg59MMiQpC8UfTUmI7YfrgNabq1n8YOrzeuYK/JhBCvYr3spyS3ZqLm/YqiDng6nWRDZJaHzlSVjf2MkH+SAolPomKLmkIahg07Sl44qbx+jgnEerus0HF7hDZz7NiabitJVmYSveRj0Y7AXaiMWFrSdmpR0ixCU1GGUkveHYxBipDYQG4TZDgVi8ATw/jCM097xigczdYjYGwIIVEXOBryLswTq3I2DZkv7BA==
      </DataArray>
      <DataArray type="Float32" Name="c" format="binary" RangeMin="-1.9948762655" RangeMax="-3.7227826397e-05">
        AQAAAACAAAAAAgAA3QEAAA==eJwVkV9IU2EYxkHpDyJpbAlySiE6XigLb4ZCU9a8iGQgsxhDDC1ieiMJbgkqJLbMy9JyCF0kCosFsaFrO9s556kRY4Wik3NT6sWcOmHdlCFt6Orx6nDO+b73fZ7fTydejiSfjkU6Cl8j8lqtpNSPSNnAZ8nn0Ecbk73R4cfvonPJfHToelOsL+OJrUtqTHh4TnaLrfKx3iNbPSE5Hz+Sb+ZE5WK4W7E0v1R6zivK6/5DZeqMoBrutqlr7iF1oWpW7boQVis2t9TMt1L88Ap4HzJiIGdD7+4jfPI+x/23XhQkH4JTYVT6E9AiGtpsaaiXfsK69AerewXMjBYhOP4h5D7B8d5fXEv9QrXrAMEr26hsWMd0aRwT+iXsrCzgxdwrZNLPUFM2iI6AHdptM251GtBqqMGXOh1uuMphMpbBxGeC7xZ+t/L/d56z87zIe1nen+GcLOdNcu4s5+u4Z5n7BO4Vub/IHB+Z5zTXNPOtMGc788rMbWb+FHuUs88H9jpiv3vsKbOvg72d7L9IDhp5bJPLWfKxkdMb8oqT21Xye0KOk+R5h1ybybeEnI3kvU/uLeT/mx6c9FFBL6CfLnp6QF/j9Oakv2p69NLnBr3O06+fnpvo20/v/wGbHSP4
      </DataArray>
      <DataArray type="Float32" Name="d" format="binary" RangeMin="-1.9948762655" RangeMax="-3.7227804569e-05">
        AQAAAACAAAAAAgAACwIAAA==eJwBAAL//Q0lHLi2g3y4NPrJuJfPH7lXKnq5XrDBufVXFLpqxmC6QnSouj/D+bodKDe7FdyEu1Cpvrv0UQe8ev49vCXsg7zJMLW8Uhz2vPxIJb2uglu9ShqQvc0Cu71w1u+9tfEXvgEnPr6O9mq+XUiPvrdqrL77n8y+02vvvjAKCr910hy/D3wvv2RlQb8T61G/CXhgv1qWbL+N/nW/eKJ8v5ZYgL8vSYG/e2yBvxoXgb8qnIC/akCAv2UvgL+YdIC/2/mAv3KLgb/j4IG/LqmBvxqYgL8I5Xy/fi92v7INbb/lvmG/3rxUv2OvRr/2Wzi/w5Qqv+0oHr+v1xO/BkcMv/D9B7+gYQe/6LQKv+gYEr9hjh2/BPcsv6sWQL9VlFa/MftvvwLehb+Yl5S/68ujvwwUs79cA8K/+CrQv6gd3b8WdOi/I9Hxv/3l+L+2df2/G1j/v5J7/r/M5fq/SrP0v7wV7L9AUeG/0bjUvwyqxr+uiLe/9rmnv12gl7+8l4e/WORvv2brUb+ktTW/1Jcbv93KA78G29y+UQ63vpwWlr7CdXO+IlRDvn8FG76GaPO9Uwi9vTg4kb0Ct1y9NeslvebC9rw9hLW88hSEvGYlPrwPZAe8v7m+u1rjhLtiLje7gMj5umZ2qLoZyGC6l1gUutKwwbmhKnq5qs8fuTf6ybiqg3y4Fc8dww==
      </DataArray>
      <DataArray type="Float32" Name="e" format="binary" RangeMin="0.0078122615814" RangeMax="1">
        AQAAAACAAAAAAgAAewEAAA==eJwVkT1IQmEUhs93lfxJ4w4FEg0WGf2jECTkPa9JQ0GEVINDg4NBQ4RQkEODY0KQY0OQRINLVNDgECFNgUNN/SzhGDUktDRpvNPl3vt957zv84gUYcsBBqWAmOwhJXmsyTY2ZQv7kkNJsjiVDVxJBg+yjhdJ40uW0ZFF9JkFTJgk5k0CGRNH3sygZKI4N5O4M6N4NcP4NWHY1gCmrRBWrF7sWDbKVgC3lhfvlhviEqx2/Wm1q6Vuz6fmPE1teN407n3WS++jjvvqeuOracp/rU1/VY+6K7oUONFQsKzt4KF2eoqKcF6fhrJ6H0nryFhSI1NR/Y6FtTZra0tFM+Wm81GtO75GxZF20SlcpJzdH5dz1n+ckHZnjk++8zv/8xzP8x7vcw7ncS7ncw/3cS/3MwfzMBfzMSfzMjfzswf7sBf7sSf7sjf7kwN5kAv5kBN5kRv5kSN5kiv5kjN5kzv50wN90Av90BN90Rv90SN90iv90jN90/s/GOieIg==
      </DataArray>
      <DataArray type="Float32" Name="f" format="binary" RangeMin="-1.9486845732" RangeMax="1.7542538643">
        AQAAAACAAAAAAgAACwIAAA==eJwBAAL//YwuSK4HAKSuX48iL+BFkjCzhhAxtE/VsIHOpLJ06jyzmUwMq65pjjSSUDs1lcW2NCayOrY+cQ63G63utoSDtTcJBqc4rCy5ONhj+LjpOhe6/TVKuvnwyTnMI1M7gcOjO4W/LjPwFGK85TTJvGzXBLwloTc9vJi9PVz1Vj0eOt29d72JvuSnTr7fkDs+V4oaP1TRCz9P9Ty++K2Fv/5PjL+/Zta23F6xP7ye1T943L4+VoSyv39u+b+zWT+/7z+FP2SL4D+682M/8v0LvwwXnL+tGz+/7sEuPhpPJz/rpe0+WJsBNhKKib6zKmC+8IQHvUaIqz2mK6I9o1uoPLOnnrz45rS8OIb4uyqLTjtC05s7RRcBO36/n7nJ9066werGufJ0mrBn1NI49YBoOPM2vjZn6CK3B23QtqxokrUjtjo17wwQNW/nBTQmmRazVcEZs7dfLLImVZAwRg79MMiQJDAUfbUmI7afrgNa7q1n8QOszesYLPJhhCvYr/spyS1Zqbm/4qiDno6nWRBZJqHzFSZjf+MkH+QAo1PoGKPmkAaig05SmI4q7x+jgvEeruu0HF7hjZz7NqabitLVmYSv+Rj0YzAYaiOWFrSdGpV0i5CU1GEUk/eH4xBipLYQG4RZDwVicAXw/rCM095xiwcz9YjYG4IIVEVOB7yLMwXq3A2Ednf/QA==
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>
</VTKFile>
