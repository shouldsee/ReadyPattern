<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="4">
    <description>
      Robert Munafo&apos;s U-skater. See &lt;a href=&quot;http://mrob.com/pub/comp/xmorphia/uskate-world.html&quot;&gt;http://mrob.com/pub/comp/xmorphia/uskate-world.html&lt;/a&gt;
      
    </description>
    <rule name="Gray-Scott" type="kernel" neighborhood_type="vertex" neighborhood_range="1" neighborhood_weight="laplacian">
      <kernel number_of_chemicals="3" block_size_x="4" block_size_y="1" block_size_z="1">
        __kernel void rd_compute(__global float4 *a_in,__global float4 *b_in,__global float4 *c_in,__global float4 *a_out,__global float4 *b_out,__global float4 *c_out)
        {
            const int index_x = get_global_id(0);
            const int index_y = get_global_id(1);
            const int index_z = get_global_id(2);
            const int X = get_global_size(0);
            const int Y = get_global_size(1);
            const int Z = get_global_size(2);
            const int index_here = X*(Y*index_z + index_y) + index_x;
        
            float4 a = a_in[index_here];
            float4 b = b_in[index_here];
            float4 c = c_in[index_here];
        
            // compute the Laplacians of each chemical
            // 2D standard 9-point stencil: [ 1,4,1; 4,-20,4; 1,4,1 ] / 6
            const int xm1 = (index_x-1+X) &amp; (X-1); // wrap (assumes X is a power of 2)
            const int xp1 = (index_x+1) &amp; (X-1);
            const int ym1 = (index_y-1+Y) &amp; (Y-1);
            const int yp1 = (index_y+1) &amp; (Y-1);
            const int index_n =  X*(Y*index_z + ym1) + index_x;
            const int index_ne = X*(Y*index_z + ym1) + xp1;
            const int index_e =  X*(Y*index_z + index_y) + xp1;
            const int index_se = X*(Y*index_z + yp1) + xp1;
            const int index_s =  X*(Y*index_z + yp1) + index_x;
            const int index_sw = X*(Y*index_z + yp1) + xm1;
            const int index_w =  X*(Y*index_z + index_y) + xm1;
            const int index_nw = X*(Y*index_z + ym1) + xm1;
            float4 a_n = a_in[index_n];
            float4 a_ne = a_in[index_ne];
            float4 a_e = a_in[index_e];
            float4 a_se = a_in[index_se];
            float4 a_s = a_in[index_s];
            float4 a_sw = a_in[index_sw];
            float4 a_w = a_in[index_w];
            float4 a_nw = a_in[index_nw];
            float4 b_n = b_in[index_n];
            float4 b_ne = b_in[index_ne];
            float4 b_e = b_in[index_e];
            float4 b_se = b_in[index_se];
            float4 b_s = b_in[index_s];
            float4 b_sw = b_in[index_sw];
            float4 b_w = b_in[index_w];
            float4 b_nw = b_in[index_nw];
            float4 c_n = c_in[index_n];
            float4 c_ne = c_in[index_ne];
            float4 c_e = c_in[index_e];
            float4 c_se = c_in[index_se];
            float4 c_s = c_in[index_s];
            float4 c_sw = c_in[index_sw];
            float4 c_w = c_in[index_w];
            float4 c_nw = c_in[index_nw];
            const float4 _K0 = -20.0f/6.0f; // center weight
            const float _K1 = 4.0f/6.0f; // edge-neighbors
            const float _K2 = 1.0f/6.0f; // vertex-neighbors
            float4 laplacian_a = (float4)(a_n.x*_K1 + a_n.y*_K2 + a.y*_K1 + a_s.y*_K2 + a_s.x*_K1 + a_sw.w*_K2 + a_w.w*_K1 + a_nw.w*_K2,
            a_n.y*_K1 + a_n.z*_K2 + a.z*_K1 + a_s.z*_K2 + a_s.y*_K1 + a_s.x*_K2 + a.x*_K1 + a_n.x*_K2,
            a_n.z*_K1 + a_n.w*_K2 + a.w*_K1 + a_s.w*_K2 + a_s.z*_K1 + a_s.y*_K2 + a.y*_K1 + a_n.y*_K2,
            a_n.w*_K1 + a_ne.x*_K2 + a_e.x*_K1 + a_se.x*_K2 + a_s.w*_K1 + a_s.z*_K2 + a.z*_K1 + a_n.z*_K2 ) + a*_K0;
            float4 laplacian_b = (float4)(b_n.x*_K1 + b_n.y*_K2 + b.y*_K1 + b_s.y*_K2 + b_s.x*_K1 + b_sw.w*_K2 + b_w.w*_K1 + b_nw.w*_K2,
            b_n.y*_K1 + b_n.z*_K2 + b.z*_K1 + b_s.z*_K2 + b_s.y*_K1 + b_s.x*_K2 + b.x*_K1 + b_n.x*_K2,
            b_n.z*_K1 + b_n.w*_K2 + b.w*_K1 + b_s.w*_K2 + b_s.z*_K1 + b_s.y*_K2 + b.y*_K1 + b_n.y*_K2,
            b_n.w*_K1 + b_ne.x*_K2 + b_e.x*_K1 + b_se.x*_K2 + b_s.w*_K1 + b_s.z*_K2 + b.z*_K1 + b_n.z*_K2 ) + b*_K0;
            float4 laplacian_c = (float4)(c_n.x*_K1 + c_n.y*_K2 + c.y*_K1 + c_s.y*_K2 + c_s.x*_K1 + c_sw.w*_K2 + c_w.w*_K1 + c_nw.w*_K2,
            c_n.y*_K1 + c_n.z*_K2 + c.z*_K1 + c_s.z*_K2 + c_s.y*_K1 + c_s.x*_K2 + c.x*_K1 + c_n.x*_K2,
            c_n.z*_K1 + c_n.w*_K2 + c.w*_K1 + c_s.w*_K2 + c_s.z*_K1 + c_s.y*_K2 + c.y*_K1 + c_n.y*_K2,
            c_n.w*_K1 + c_ne.x*_K2 + c_e.x*_K1 + c_se.x*_K2 + c_s.w*_K1 + c_s.z*_K2 + c.z*_K1 + c_n.z*_K2 ) + c*_K0;
        
            float4 delta_a = 0.0f;
            float4 delta_b = 0.0f;
            float4 delta_c = 0.0f;
        
            float4 timestep = c;
            float4 D_a = 0.164000f;
            float4 D_b = 0.082000f;
            float4 k = 0.060930f;
            float4 F = 0.062000f;
        
            delta_a = D_a * laplacian_a - a*b*b + F*(1.0f-a);
            delta_b = D_b * laplacian_b + a*b*b - (F+k)*b;
            
        
            a_out[index_here] = a + timestep * delta_a;
            b_out[index_here] = b + timestep * delta_b;
            c_out[index_here] = c + timestep * delta_c;
        }
        
      </kernel>
    </rule>
    <initial_pattern_generator apply_when_loading="false">
      <overlay chemical="a">
        <overwrite>
        </overwrite>
        <constant value="0.5">
        </constant>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="b">
        <overwrite>
        </overwrite>
        <constant value="0.3">
        </constant>
        <everywhere>
        </everywhere>
      </overlay>
      <overlay chemical="b">
        <overwrite>
        </overwrite>
        <constant value="0">
        </constant>
        <rectangle>
          <point3D x="0.4" y="0.62" z="0">
          </point3D>
          <point3D x="0.56" y="0.74" z="1">
          </point3D>
        </rectangle>
        <rectangle>
          <point3D x="0.4" y="0.4" z="0">
          </point3D>
          <point3D x="0.56" y="0.52" z="1">
          </point3D>
        </rectangle>
        <rectangle>
          <point3D x="0.48" y="0.5" z="0">
          </point3D>
          <point3D x="0.56" y="0.62" z="1">
          </point3D>
        </rectangle>
      </overlay>
    </initial_pattern_generator>
    <render_settings>
      <surface_color r="1" g="1" b="1">
      </surface_color>
      <color_low r="1" g="0" b="0">
      </color_low>
      <color_high r="1" g="0" b="1">
      </color_high>
      <show_color_scale value="true">
      </show_color_scale>
      <show_multiple_chemicals value="true">
      </show_multiple_chemicals>
      <active_chemical value="b">
      </active_chemical>
      <low value="0">
      </low>
      <high value="0.45">
      </high>
      <vertical_scale_1D value="30">
      </vertical_scale_1D>
      <vertical_scale_2D value="15">
      </vertical_scale_2D>
      <contour_level value="0.25">
      </contour_level>
      <use_wireframe value="false">
      </use_wireframe>
      <show_cell_edges value="false">
      </show_cell_edges>
      <show_bounding_box value="true">
      </show_bounding_box>
      <slice_3D value="true">
      </slice_3D>
      <slice_3D_axis value="z">
      </slice_3D_axis>
      <slice_3D_position value="0.5">
      </slice_3D_position>
      <show_displacement_mapped_surface value="true">
      </show_displacement_mapped_surface>
      <color_displacement_mapped_surface value="true">
      </color_displacement_mapped_surface>
      <use_image_interpolation value="true">
      </use_image_interpolation>
      <timesteps_per_render value="8">
      </timesteps_per_render>
      <show_phase_plot value="false">
      </show_phase_plot>
      <phase_plot_x_axis value="a">
      </phase_plot_x_axis>
      <phase_plot_y_axis value="b">
      </phase_plot_y_axis>
      <phase_plot_z_axis value="c">
      </phase_plot_z_axis>
    </render_settings>
  </RD>
  <ImageData WholeExtent="0 127 0 63 0 0" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 127 0 63 0 0">
    <PointData>
      <DataArray type="Float32" Name="a" format="binary" RangeMin="0.5" RangeMax="0.5">
        AQAAAACAAAAAAAAAOQAAAA==eJztwwENAAAMw6A6u39XFzJIqC5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVHf8pSuBq
      </DataArray>
      <DataArray type="Float32" Name="b" format="binary" RangeMin="0" RangeMax="0.30000001192">
        AQAAAACAAAAAAAAAaAAAAA==eJzt0tkJACAMBUErs09TrUV4gW8C85+wqTF6AQAAAAAAAAAAAAAAAFzQNs/re9Af/dEf/dEf/dGf83/yek/0R3/0R3/0Z72r/n/SP5v+2fTPpn82/bPpn01/AAAAAAAAACDNBAPxPMs=
      </DataArray>
      <DataArray type="Float32" Name="c" format="binary" RangeMin="0" RangeMax="0">
        AQAAAACAAAAAAAAANAAAAA==eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAQ==
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>
</VTKFile>
